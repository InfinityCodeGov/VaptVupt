package www.vaptvupt.com.gov.vaptvupt

import android.app.NotificationChannel
import android.app.NotificationManager
import android.content.Context
import android.os.Build
import android.webkit.JavascriptInterface
import android.webkit.WebResourceRequest
import android.webkit.WebView
import android.webkit.WebViewClient
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import androidx.core.app.NotificationCompat
import androidx.core.app.NotificationManagerCompat
import androidx.core.content.ContextCompat

class MainActivity : AppCompatActivity() {

    private lateinit var webView: WebView
    private val CHANNEL_ID = "web_notifications_channel"

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)

        // Configura a cor da barra de status (verde escuro)
        window.statusBarColor = Color.parseColor("#006400") // Verde escuro

        setContentView(R.layout.activity_main)

        // Inicializa a WebView
        webView = findViewById(R.id.webview)

        // Configurações da WebView
        webView.settings.apply {
            javaScriptEnabled = true
            domStorageEnabled = true // Habilitar armazenamento DOM
            useWideViewPort = true // Ajustar o conteúdo para caber na tela
            loadWithOverviewMode = true // Ajustar automaticamente o tamanho
            allowFileAccess = true // Permitir acesso a arquivos locais
            builtInZoomControls = true // Permitir zoom interno
            displayZoomControls = false // Ocultar controles de zoom padrão
            setSupportZoom(true) // Habilitar zoom no WebView
        }

        // Cliente da WebView com validação de URL e injeção de JavaScript
        webView.webViewClient = object : WebViewClient() {
            override fun shouldOverrideUrlLoading(view: WebView?, request: WebResourceRequest?): Boolean {
                // Garantir que apenas URLs HTTPS sejam carregadas
                if (request?.url?.scheme == "https") {
                    return false // Permitir carregar o URL
                } else {
                    Toast.makeText(this@MainActivity, "Bloqueado: apenas HTTPS permitido", Toast.LENGTH_SHORT).show()
                    return true // Bloquear URLs não HTTPS
                }
            }

            override fun onPageFinished(view: WebView?, url: String?) {
                super.onPageFinished(view, url)

                // Adicionar scripts para melhorar a compatibilidade mobile e outros ajustes
                webView.evaluateJavascript(
                    """
                    document.body.style.fontSize = '16px';
                    document.body.style.lineHeight = '1.5';
                    document.body.style.margin = '0';
                    document.body.style.padding = '0';
                    """.trimIndent(), null
                )

                webView.evaluateJavascript(
                    """
                    document.addEventListener('DOMContentLoaded', function() {
                        observeChanges();
                    });
                    function observeChanges() {
                        const observer = new MutationObserver((mutationsList, observer) => {
                            for(let mutation of mutationsList) {
                                if (mutation.type === 'childList' || mutation.type === 'subtree') {
                                    // Notificar se houver alterações no DOM
                                    showNotification('Página foi alterada!');
                                }
                            }
                        });
                        observer.observe(document.body, { childList: true, subtree: true });
                    }
                    """.trimIndent(), null
                )

                // Script 4: Evitar rotação de tela para evitar layout quebrado
                webView.evaluateJavascript(
                    """
                    window.addEventListener('orientationchange', function() {
                        if (window.orientation === 90 || window.orientation === -90) {
                            window.scrollTo(0, 0); // Voltar para o topo ao mudar de orientação
                        }
                    });
                    """.trimIndent(), null
                )
            }

            override fun onReceivedError(
                view: WebView?,
                errorCode: Int,
                description: String?,
                failingUrl: String?
            ) {
                Toast.makeText(this@MainActivity, "Erro ao carregar a página: $description", Toast.LENGTH_SHORT).show()
            }
        }

        // Adiciona interface de comunicação com o JavaScript
        webView.addJavascriptInterface(WebAppInterface(), "Android")

        // Cria o canal de notificação (Android 8.0+)
        createNotificationChannel()

        // Carrega o site (HTTPS)
        webView.loadUrl("https://agendamento.meuvaptvupt.com.br/agendamento/")
    }

    // Sobrescreve o botão de voltar para navegar na WebView
    override fun onBackPressed() {
        if (webView.canGoBack()) {
            webView.goBack()
        } else {
            super.onBackPressed()
        }
    }

    // Classe para interagir com o JavaScript
    inner class WebAppInterface {
        @JavascriptInterface
        fun showNotification(message: String) {
            showNotification(message)
        }
    }

    // Método para mostrar notificação
    private fun showNotification(message: String) {
        val notificationManager = getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager
        val builder = NotificationCompat.Builder(this, CHANNEL_ID)
            .setSmallIcon(R.drawable.ic_launcher_foreground) // Substituir com o ícone da sua app
            .setContentTitle("Notificação WebView")
            .setContentText(message)
            .setPriority(NotificationCompat.PRIORITY_HIGH)
            .setAutoCancel(true)

        notificationManager.notify(1, builder.build())
    }

    // Cria o canal de notificação (necessário para Android 8.0 e superior)
    private fun createNotificationChannel() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            val name = "WebView Notifications"
            val descriptionText = "Notificações de alteração na WebView"
            val importance = NotificationManager.IMPORTANCE_HIGH
            val channel = NotificationChannel(CHANNEL_ID, name, importance).apply {
                description = descriptionText
            }
            val notificationManager: NotificationManager = getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager
            notificationManager.createNotificationChannel(channel)
        }
    }
}
